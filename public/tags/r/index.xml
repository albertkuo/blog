<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Blog | Albert</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Blog | Albert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating an R Package (for the first time!)</title>
      <link>/post/creating-an-r-package-for-the-first-time/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/creating-an-r-package-for-the-first-time/</guid>
      <description>Recently, I made an R package for the first time.1 There are already a lot of great resources online for this task, such as Hilary Parker’s brief tutorial or Jeff Leek’s guide or Hadley Wickham’s book (in increasing order of detail).2 But I thought it would still be worthwhile to walk through how exactly I made mine, since otherwise, I will probably run into the same hiccups again (and be frustrated that I didn’t write a guide for myself!</description>
    </item>
    
    <item>
      <title>Getting Started with R Markdown</title>
      <link>/post/getting-started-with-r-markdown/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/getting-started-with-r-markdown/</guid>
      <description>I often use R Markdown for my research projects or any kind of data analysis (if you’re familiar with Python, they are similar to Jupyter notebooks). There are many advantages to using R Markdown over writing R scripts. One of the major ones is the ease with which it allows me to turn my work into something presentable for my advisor or other collaborators. By using R Markdown, I don’t have to track down a bunch of plots and files or really do any additional work to organize them.</description>
    </item>
    
    <item>
      <title>A Few of My Favorite R Packages</title>
      <link>/post/a-few-of-my-favorite-r-packages/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/a-few-of-my-favorite-r-packages/</guid>
      <description>I just finished my second year in the PhD program, which means 2 years of writing a lot of R code. Today, I wanted to share some useful (and perhaps lesser known) R packages that I use.
pacman for loading packages:  This package contains an awesome function called p_load. I prefer the concise way it lets you load packages, as opposed to writing library(package) over and over again. Moreover, p_load automatically checks if you have installed the package and if you haven’t, installs it for you from CRAN.</description>
    </item>
    
    <item>
      <title>Point Shape Options in ggplot</title>
      <link>/post/point-shape-options-in-ggplot/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/point-shape-options-in-ggplot/</guid>
      <description>I’m familiar enough with ggplot that I can make a quick plot pretty easily in most cases.1 But when it comes to fine-tuning the various plot aesthetics, like adjusting the legend position or rotating axis tick labels, I always have to look them up. Today, I will be writing about one of these pesky things: looking up the point shape options for geom_point. The available documentation for this isn’t great, so I thought it would be worthwhile to write my own reference.</description>
    </item>
    
    <item>
      <title>Submitting Parallel Jobs on a Cluster</title>
      <link>/post/submitting-parallel-jobs-on-a-cluster/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/submitting-parallel-jobs-on-a-cluster/</guid>
      <description>Recently, I’ve been running simulations on our school’s computing cluster (JHPCE), which schedules jobs using the Open Grid Engine. Each simulation takes about half a day to complete, so I could run them sequentially and wait a week to get 14 simulation points. Or I could run them in parallel and get 14 simulation points in less than a day!
In theory, running my simulations in parallel should be a very straightforward task.</description>
    </item>
    
  </channel>
</rss>