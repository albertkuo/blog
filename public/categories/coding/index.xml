<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on Blog | Albert</title>
    <link>/categories/coding/</link>
    <description>Recent content in Coding on Blog | Albert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Learning to Use Vim</title>
      <link>/post/learning-to-use-vim/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/learning-to-use-vim/</guid>
      <description>Even though vim has been my default text editor for a couple of years now, I’m still woefully ignorant about how to actually use it. Because 95% of my coding time is spent in RStudio, I really only use vim to briefly edit some bash scripts and therefore my unfamiliarity with it isn’t an urgent issue. Nonetheless, I tried to rectify this shortcoming a few months ago by changing my RStudio settings to “vim mode” and forcing myself to use vim commands all the time.</description>
    </item>
    
    <item>
      <title>Introduction to Regular Expressions (regex) in R</title>
      <link>/post/introduction-to-regular-expressions-regex-in-r/</link>
      <pubDate>Wed, 08 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-regular-expressions-regex-in-r/</guid>
      <description>If you haven’t used regular expressions (regex) before, they are basically a way to write search patterns for strings. I’ve always found them to be inscrutable and unintuitive, so even though the search pattern I have in mind is usually very simple and should, in theory, require only a basic regex, I always have to Google what the correct syntax is. Today, I’m going to try to solve this problem by writing my own guide to regex.</description>
    </item>
    
    <item>
      <title>Getting Started with R Markdown</title>
      <link>/post/getting-started-with-r-markdown/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/getting-started-with-r-markdown/</guid>
      <description>I often use R Markdown for my research projects or any kind of data analysis (if you’re familiar with Python, they are similar to Jupyter notebooks). There are many advantages to using R Markdown over writing R scripts. One of the major ones is the ease with which it allows me to turn my work into something presentable for my advisor or other collaborators. By using R Markdown, I don’t have to track down a bunch of plots and files or really do any additional work to organize them.</description>
    </item>
    
    <item>
      <title>Point Shape Options in ggplot</title>
      <link>/post/point-shape-options-in-ggplot/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/point-shape-options-in-ggplot/</guid>
      <description>I’m familiar enough with ggplot that I can make a quick plot pretty easily in most cases.1 But when it comes to fine-tuning the various plot aesthetics, like adjusting the legend position or rotating axis tick labels, I always have to look them up. Today, I will be writing about one of these pesky things: looking up the point shape options for geom_point. The available documentation for this isn’t great, so I thought it would be worthwhile to write my own reference.</description>
    </item>
    
    <item>
      <title>Submitting Parallel Jobs on a Cluster</title>
      <link>/post/submitting-parallel-jobs-on-a-cluster/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/submitting-parallel-jobs-on-a-cluster/</guid>
      <description>Recently, I’ve been running simulations on our school’s computing cluster (JHPCE), which schedules jobs using the Open Grid Engine. Each simulation takes about half a day to complete, so I could run them sequentially and wait a week to get 14 simulation points. Or I could run them in parallel and get 14 simulation points in less than a day!
In theory, running my simulations in parallel should be a very straightforward task.</description>
    </item>
    
    <item>
      <title>Setting Up My Blog: Why I Chose Hugo Over Jekyll</title>
      <link>/post/setting-up-my-blog-why-i-chose-hugo-over-jekyll/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/setting-up-my-blog-why-i-chose-hugo-over-jekyll/</guid>
      <description>I’ve been reading a lot of people’s blogs in the statistics/data science world lately and it made me start thinking about things that I wanted to write about and share. So here we are – my first post! Hello world!
Before I could write anything, I had to decide on how I was going to build and host the blog. For my personal website, I already use Jekyll, so it seemed natural to build my blog as part of my website.</description>
    </item>
    
  </channel>
</rss>