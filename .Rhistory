# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 60:120){
n_prob = 1/61
if(n > current_diff){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + diff) %% 2 == 0){
p_tie = dbinom((n + diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
x = 0
}
}
print(x)
current_diff = 10
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 60:120){
n_prob = 1/61
if(n > current_diff){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
x = 0
}
}
print(x)
current_diff = 10
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 60:120){
n_prob = 1/61
if(n > current_diff){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + current_diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
x = 0
}
}
print(x)
current_diff = 1
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 60:120){
n_prob = 1/61
if(n > current_diff){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + current_diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
p_win = 0
}
}
print(p_win)
current_diff = 0
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 60:120){
n_prob = 1/61
if(n > current_diff){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + current_diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
p_win = 0
}
}
print(p_win)
current_diff = 2
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 60:120){
n_prob = 1/61
if(n > current_diff){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + current_diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
p_win = 0
}
}
print(p_win)
current_diff = 10
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 60:120){
n_prob = 1/61
if(n > current_diff){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + current_diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
p_win = 0
}
}
print(p_win)
current_diff = 10
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 80:120){
n_prob = 1/41
if(n > current_diff){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + current_diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
p_win = 0
}
}
print(p_win)
current_diff = 5
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 80:120){
n_prob = 1/41
if(n > current_diff){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + current_diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
p_win = 0
}
}
print(p_win)
current_diff = 1
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 80:120){
n_prob = 1/41
if(n > current_diff){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + current_diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
p_win = 0
}
}
print(p_win)
current_diff = 2
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 80:120){
n_prob = 1/41
if(n > current_diff){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + current_diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
p_win = 0
}
}
print(p_win)
current_diff = 3
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 80:120){
n_prob = 1/41
if(n > current_diff){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + current_diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
p_win = 0
}
}
print(p_win)
current_diff = 40
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 80:120){
n_prob = 1/41
if(n > current_diff*2){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + current_diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
p_win = 0
}
}
print(p_win)
current_diff = 60
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 80:120){
n_prob = 1/41
if(n > current_diff*2){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + current_diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
p_win = 0
}
}
print(p_win)
current_diff = 2
n = rnorm(100, mean = 80, sd = 5) # empirical # of points left to earn
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
n = 100           # # of points left to earn
n_overtime = 10   # # of points in overtime
p_win = 0 # Probability of winning the game
for(n in 80:120){
n_prob = 1/41
if(n > current_diff*2){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + current_diff)/2), n, p))*n_prob
# Probability of winning in overtime
if((n + current_diff) %% 2 == 0){
p_tie = dbinom((n + current_diff)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5*n_prob # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
p_win = 0
}
}
print(p_win)
library(tidyverse)
library(rvest)
webpage <- read_html("https://www.espn.com/nba/playbyplay?gameId=401248438")
times = webpage %>%
html_nodes(".time-stamp") %>%
html_text()
scores = webpage %>%
html_nodes(".combined-score") %>%
html_text()
tibble(times = times,
scores = scores)
library(reticulate)
# py_install("nba_api", pip = TRUE) # Install nba_api python module
# py_install("pandas")
py_install("nba_api", pip = TRUE) # Install nba_api python module
print(py$df)
df = py$df
df
names(df)
df$SCORE
as_tibble(df)
as_tibble(df) %>%
select(PCTIMESTRING, SCORES)
names(df)
as_tibble(df) %>%
select(PCTIMESTRING, SCORE, SCOREMARGIN)
df$SCOREMARGIN
as_tibble(df) %>%
select(PCTIMESTRING, SCORE, SCOREMARGIN)
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(pacman)
p_load(dplyr, rvest)
games_playoffs_summ = readRDS("~/Google Drive/Projects/nba_comeback/data/games_playoffs_summ.rds")
games_playoffs_summ %>% select(-text)
p_load(fda, ggplot2)
df = games_playoffs_summ %>%
mutate(time_left = (4-as.numeric(quarter))*12 + minute) %>%
filter(diff == -5) %>%
arrange(time_left)
tmp = df
x = tmp$time_left
y = tmp$prob_win
rng = c(min(x), max(x)) # range of x
# b-spline basis
norder = 6
n = length(x)
nbasis = n + norder - 2
wbasis = create.bspline.basis(rng, nbasis, norder, x)
# starting values for coefficient
cvec0 = matrix(0, nbasis, 1)
Wfd0 = fd(cvec0, wbasis)
# set up functional parameter object
Lfdobj = 3          #  penalize curvature of acceleration
lambda = 10^(-0.5)  #  smoothing parameter
growfdPar = fdPar(Wfd0, Lfdobj, lambda)
wgt = tmp$n         # weight vector = sample size
# smoothed result
result = smooth.monotone(x, y, growfdPar, wgt, conv = 0.1)
# smoothed result
result = smooth.monotone(x, y, growfdPar, wgt, conv = 0.1)
# coefficients
Wfd = result$Wfdobj
# coefficients
Wfd = result$Wfdobj
beta = result$beta
y_smooth = beta[1] + beta[2]*eval.monfd(x, Wfd)
y_smooth = sapply(y_smooth, function(y) ifelse(y > 0.5, 0.5, y))
y_smooth = sapply(y_smooth, function(y) ifelse(y < 0, 0, y))
# save smoothed line
df = df %>%
mutate(prob_win_smooth_time = y_smooth)
df %>%
ggplot(aes(x = time_left, y = prob_win)) +
geom_point() +
geom_line(aes(y = y_smooth)) +
labs(title = "Score margin = -5") +
theme_bw()
games_playoffs_npoints = readRDS("~/Google Drive/Projects/nba_comeback/data/games_playoffs_npoints.rds")
model_prob = function(x, diff){
score_margin = abs(diff)
n = games_playoffs_npoints %>%  # number of scoring plays left
filter(time_left == x) %>%
pull(n_points_left) %>%
floor()
p = 0.5 # probability scoring on each play of losing team
# X ~ Binom(n, p) # the number of points losing team will score in remaining time
# Y ~ Binom(n, 1 - p) # the number of points winning team will score in remaining time
p_win = 0 # Probability of winning the game
if(n >= score_margin/2){
# Probability of winning in regulation
p_win = p_win + (1 - pbinom(floor((n + score_margin)/2), n, p))
# Probability of winning in overtime
if((n + score_margin) %% 2 == 0){
p_tie = dbinom((n + score_margin)/2, n, p)
} else {
p_tie = 0
}
p_win_overtime = p_tie*0.5 # In the event of a tie at regulation, assume teams are equally matched, so conditional probability of winning in overtime is 0.5
p_win = p_win + p_win_overtime
} else {
p_win = 0
}
return(p_win)
}
df$y_model = sapply(df$time_left, function(x) model_prob(x, -5))
df %>%
ggplot(aes(x = time_left, y = prob_win)) +
geom_point() +
geom_line(aes(y = y_model)) +
labs(title = "Score margin = -5") +
theme_bw()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
